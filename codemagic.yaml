workflows:
  ionic-capacitor-ios-workflow:
    name: Ionic Capacitor iOS Workflow
    max_build_duration: 120
    instance_type: mac_mini
    environment:
      groups:
        # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
        # - manual_code_signing # <-- (Includes CM_CERTIFICATE, CM_CERTIFICATE_PASSWORD, CM_PROVISIONING_PROFILE)
        - app_store_credentials # <-- (Includes APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY)
          # APP_STORE_CONNECT_ISSUER_ID <-- Put your App Store Connect Issuer Id here
          # APP_STORE_CONNECT_KEY_IDENTIFIER <-- Put your App Store Connect Key Identifier here
          # APP_STORE_CONNECT_PRIVATE_KEY <-- Put your App Store Connect Private Key here
          # See the following link for more details - https://docs.codemagic.io/code-signing-yaml/signing-ios/
        # https://appstoreconnect.apple.com/access/api
        - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
      vars:
        # Ionic Xcode worskspace and scheme
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_APP_ID: 1614009676 # <-- Put the app id number here. This is found in App Store Connect > App > General > App Information
      node: 12.18.4
      xcode: 12
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: develop
          include: true
          source: true
    scripts:
      - name: Install cordova res for splashs and icon
        script: |
          npm install -g cordova-res --unsafe-perm
      - name: Install npm dependencies for Ionic project
        script: |
          npm install && npm run build:prod
      - name: Update dependencies and copy web assets to native project
        script: |
          # npx cap copy # <- use this is you don't need to update native dependencies
          npx cap add ios # <- update native dependencies and copy web assets to native project
      - name: Execute cordova res for splashs and icon
        script: |
          cordova-res ios --skip-config --copy
      - name: Add Plist Permissions Camera
        script: |
          plutil -insert NSCameraUsageDescription -string "We require access to the camera to use it to upload payment notification attachments and documentation in communication with the service provider." ios/App/App/Info.plist
      - name: Add Plist Permissions PhotoLibrary
        script: |
          plutil -insert NSPhotoLibraryAddUsageDescription -string "We require access to the photo library to use it to upload payment notification attachments and documentation in communication with the service provider." ios/App/App/Info.plist
      - name: Add Plist Permissions PhotoLibrary 2
        script: |
          plutil -insert NSPhotoLibraryUsageDescription -string "We require access to the photo library to use it to upload payment notification attachments and documentation in communication with the service provider." ios/App/App/Info.plist
      - name: Cocoapods installation
        script: |
          cd ios/App && pod install
      - name: Pod Update
        script: |
          npx cap update ios
      - name: Add Plist Firebase
        script: |
          echo $GOOGLE_SERVICES_PLIST | base64 --decode > $FCI_BUILD_DIR/ios/App/App/GoogleService-Info.plist
      - name: Add Plist Firebase 2
        script: |
          echo $GOOGLE_SERVICES_PLIST | base64 --decode > /Users/builder/Downloads/GoogleService-Info.plist
      - name: Add SwiftDelegate modified
        script: |
            rm -rf ios/App/App/AppDelegate.swift && CP AppDelegate.swift ios/App/App/
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: |
          keychain initialize
      #- name: Set up Provisioning profiles from environment variables (Use with manual code signing)
      #  script: |
      #    PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
      #    mkdir -p "$PROFILES_HOME"
      #    PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
      #    echo ${CM_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
      #    echo "Saved provisioning profile $PROFILE_PATH"
      - name: Fetch signing files
        script: |
          # app-store-connect fetch-signing-files "com.nevercode.ncionicapp" --type IOS_APP_STORE --create
          app-store-connect fetch-signing-files "ar.com.siwca.coope.cooperativas.isma" --type IOS_APP_STORE --create
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      #- name: Set up signing certificate (Use with manual code signing)
      #  script: |
      #    echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
      #    keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
      - name: Add certificates to keychain
        script: |
          keychain add-certificates
      - name: Increment build number
        script: |
          #!/bin/sh
          set -e
          set -x
          cd $FCI_BUILD_DIR/ios/App
          agvtool new-version -all $(($BUILD_NUMBER +1))
          # agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" --verbose
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true                     # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
        submit_to_app_store: true
        release_type: MANUAL
        # beta_groups:                                  # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
        #   - group name 1
        #   - group name 2
      email:
        recipients:
          - ccasanovas.comex@gmail.com
          - olivera_emiliano@hotmail.com
        notify:
          success: true     # To not receive a notification when a build succeeds
          failure: false     # To not receive a notification when a build fails

            #ionic-capacitor-android-workflow:
            #    name: Ionic Capacitor Android Workflow
            #    max_build_duration: 120
            #    instance_type: mac_pro
            #    environment:
            #        groups:
            # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
            #            - keystore_credentials # <-- (Includes CM_KEYSTORE, CM_KEYSTORE_PASSWORD, CM_KEY_ALIAS_PASSWORD, CM_KEY_ALIAS_USERNAME)
            # CM_KEYSTORE <-- Put your keystore file here
            # CM_KEYSTORE_PASSWORD <-- Put your keystore password here
            # CM_KEY_ALIAS_PASSWORD <-- Put your keystore alias password here
          # CM_KEY_ALIAS_USERNAME <-- Put your keystore alias username here
  #            - google_play # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS <-- Put CONTENTS of your Gloud crendentials file here)
  #            - other
  #        node: latest
  #    triggering:
  #        events:
  #            - push
  #            - tag
  #            - pull_request
  #        branch_patterns:
  #            - pattern: develop
  #              include: true
  #              source: true
  #    scripts:
  #        - name: Install npm dependencies for Ionic project
  #          script: |
  #            npm install
  #        - name: Set Android SDK location
  #          script: |
  #            echo "sdk.dir=$ANDROID_SDK_ROOT" > "$FCI_BUILD_DIR/android/local.properties"
  #        - name: Set up keystore
  #          script: |
  #            echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
  #            # The following script creates key.properties file and stores the credentials in it. As we configure code signing in app/build.gradle file, the following part is unnecessary unless code signing is configured differently as explained in the documentation: https://docs.codemagic.io/flutter-code-signing/android-code-signing/
  #            # cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
  #            # storePassword=$CM_KEYSTORE_PASSWORD
  #            # keyPassword=$CM_KEY_ALIAS_PASSWORD
  #            # keyAlias=$CM_KEY_ALIAS_USERNAME
  #            # storeFile=/tmp/keystore.keystore
  #            # EOF
  #        - name: Update dependencies and copy web assets to native project
  #          script: |
  #            # npx cap copy # <- use this is you don't need to update native dependencies
  #            npx cap sync # <- update native dependencies and copy web assets to native project
  #        - name: Build Android release
  #          script: |
  #            cd android
  #            ./gradlew assembleRelease
  #    artifacts:
  #        - android/app/build/outputs/**/*.apk
  #    publishing:
  #        google_play:
  #            credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
  #            track: internal # Any default or custom track that is not in ‘draft’ status
  #        email:
  #            recipients:
  #                - user_one@example.com
  #                - user_two@example.com
  #            notify:
  #              success: true     # To not receive a notification when a build succeeds
  #              failure: false     # To not receive a notification when a build fails
